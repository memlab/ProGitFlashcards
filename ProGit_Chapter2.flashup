* How do you initialize a repository in a directory?
`$ git init`
This creates a new subdirectory named .git that contains all your necessary repository files - a Git Repository skeleton.

* What are the 2 basic steps to start version controlling existing files?

`add` and `commit`

`$ git add *.c`

`$ git commit -m 'initial project version'`

* How do you clone an existing repository?

`
$ git clone git@github.com:memlab/ProGitFlashcards.git
`

This creates a directory named ProGitFlashCards, initializes a .git directory inside it, pulls down all the data for that repository and checks out a working cop of the latest version 

* How do you check the status of your files?

`$ git status`

* How do you start tracking a new file?

`$ git add newFile`

Note: Git add can be used to both start tracking file and also update a modified file to staging. Remember when you use git commit, only the version of the file in staging will be commited.

* How do you update modified files to staging?

`$ git add modifiedFile`

Note: Git add can be used to both start tracking file and also update a modified file to staging. Remember when you use git commit, only the version of the file in staging will be commited. 

* How do you tell git to ignore some specific files?
`$ cat .gitignore`

`.[oa]`

`~`

The first line tells Git to ignore file ending in `.o` or `.a`, the second line tells git to ignore files that end with a tilde `~`.


* How do you view changes that are not yet staged?

`$ git diff`

Note: This command will only show you changes that are still unstaged. If you've staged all of your changes, `git diff` will give you no output.

* How do you view changes that you have staged, but not yet commited?

`$git diff --cached`

* How do you commit your changes?

`$ git commit`
This launches the editor of your choice so that you can type your commit message.

Also, `$ git commit -m "Your Commit Message"`
can be used to commit your changes by typing your message inline.

* Can you skip the staging area?
* If yes, how?
`$ git commit -a -m 'Your Commit Message'`

* How do you remove a tracked file?
* How do you remove a tracked directory?
`$ git rm fileName`
`$ git rm -r`
Note: The next time you commit, the file will be gone and no longer tracked.

* How do you keep a file in your working tree but remove it from your staging area?
`$ git rm --cached fileName`
Note: This is particularly useful if you forgot to add something to your `.gitignore` file and accidentally added it, like a large log of compiled `.a` files.

* How do you move/rename a file notifying git? 
`$ git mv file_from file_to`
Note : This is equivalent to running something like 
`$ mv README.txt README`
`$ git rm README.txt`
`$ git add README`

* How do you view the commit history?
`$ git log`
Note: With no arguments `git log` lists the commits made in that repository in reverse chronological order. 


* How do you view the commit history in different formats?
`$ git log --pretty=oneline`
`$ git log --pretty=short`
`$ git log --pretty=full`
`$ git log --pretty=fuller`

*How do you specify your own output log format?
`
$ git log --pretty = format:"%h - %an, %ar : %s"
`
Note : The above command lists each commit with its SHA-1 checksum, the username, the date written and the commit message.
 
* List the output log formats options and their tasks.

`%H` Commit hash
`%h` Abbreviated commit hash
`%T` Tree hash
`%t` Abbreviated tree hash
`%P` Parent hashes
`%p` Abbreviated parent hashes
`%an` Author name
`%ae` Author e-mail
`%ad` Author date (format respects the --date= option)
`%ar` Author date, relative
`%cn` Committer name
`%ce` Committer email
`%cd` Committer date
`%cr` Committer date, relative

* List the output log options and their tasks.

`-p`: Show the patch introduced with each commit.

`--stat`: Show statistics for files modified in each commit.

`--shortstat`: Display only the changed/insertions/deletions line from the --stat command.

`--name-only`: Show the list of files modified after the commit information.

`--name-status`: Show the list of files affected with added/modified/deleted information as well.

`--abbrev-commit`: Show only the first few characters of the SHA-1 checksum instead of all 40.

`--relative-date`: Display the date in a relative format (for example, "2 weeks ago") instead of using the full date format.

`--graph`: Display an ASCII graph of the branch and merge history beside the log output.

`--pretty`: Show commits in an alternate format. Options include oneline, short, full, fuller, and format (where you specify your own format).


* How do you limit your log output?
`$ git log --since=2.weeks`
Note: This command works with lots of formats you can specify a specific date (2008-01-15) or a relative date such as "2 years 1 day 3 minutes ago".
		

* List the `git log` filter options.

`-(n)`: Show only the last n commits

`--since, --after`: Limit the commits to those made after the specified date.

`--until, --before`: Limit the commits to those made before the specified date.

`--author`: Only show commits in which the author entry matches the specified string.

`--committer`: Only show commits in which the committer entry matches the specified string.

* How do you change your last commit?
`$ git commit --amend`

Note: This can be used when you commit too early and possibly forget to add some files. This command takes your staging area and uses it for commit. As an example, if you commit and realize you forgot to stage changes in a file you wanted to add to this commit you can do, 
`$ git commit -m 'initial commit'`
`$ git add forgotten_file`
`$ git commit --amend`

* How do you unstage a staged file?
`$ git reset HEAD fileName`

* How do you unmodify a modified file?
`$ git checkout --fileName`
Note: Realize that by using this command, any changes you made to your file are gone. You just copied another file over it. 

* How do you see which remote servers you have configured?
`$ git remote`
Note: If you've cloned your repository, you should see origin. You can also specify '-v', which shows the URL that Git has stored. 

* How do you add a remote repository?
'$ git remote add shortName git@github.com:memlab/ProGitFlashcards.git'
Note: Now you can use shortName on the command line in lieu of the whole URL. 

* How do you fetch from your remotes?
`$ git fetch [remote-name]

* How do you push to your remotes?
'$ git push [remote-name] [branch-name]'
Example: `git push origin master`


